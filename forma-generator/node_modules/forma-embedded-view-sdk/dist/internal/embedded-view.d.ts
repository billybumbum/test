import { AnalysisApi } from "./analysis.js";
import { AreaMetricsApi } from "./areaMetrics.js";
import { ExtensionsApi } from "./extensions.js";
import { GeneratorsApi } from "./generators.js";
import { GeometryApi } from "./geometry.js";
import { CreateSubscriptionResult, IframeMessenger } from "./iframe-messenger.js";
import { IntegrateApi } from "./integrate.js";
import { LibraryApi } from "./library.js";
import { ProjectApi } from "./project.js";
import { ProposalApi } from "./proposal.js";
import { CameraApi } from "./scene/camera.js";
import { RenderApi } from "./scene/render.js";
import { SunApi } from "./scene/sun.js";
import { TerrainApi } from "./scene/terrain.js";
import { SelectionApi } from "./selection.js";
import { EventHandler, RequestHandler, SubscribeHandler } from "./types.js";
export type EmbeddedViewSdkConfig = Readonly<{
    debug?: boolean | undefined;
    origin?: string | undefined;
    allowedOrigins?: Readonly<string[]> | undefined;
}>;
export declare class EmbeddedViewSdk {
    #private;
    readonly config?: Readonly<{
        debug?: boolean | undefined;
        origin?: string | undefined;
        allowedOrigins?: readonly string[] | undefined;
    }> | undefined;
    source: Window;
    readonly origin: string;
    analysis: AnalysisApi;
    extensions: ExtensionsApi;
    generators: GeneratorsApi;
    geometry: GeometryApi;
    integrateElements: IntegrateApi;
    library: LibraryApi;
    project: ProjectApi;
    proposal: ProposalApi;
    camera: CameraApi;
    sun: SunApi;
    terrain: TerrainApi;
    render: RenderApi;
    selection: SelectionApi;
    areaMetrics: AreaMetricsApi;
    constructor(config?: Readonly<{
        debug?: boolean | undefined;
        origin?: string | undefined;
        allowedOrigins?: readonly string[] | undefined;
    }> | undefined);
    ping(): Promise<string>;
    getIframeMessenger(): IframeMessenger;
    getProjectId(): string;
    getExtensionId(): string;
    static getHostOrigin(): string;
    setRequestHandler(name: string, handler: RequestHandler): void;
    setEventHandler(name: string, handler: EventHandler): void;
    setSubscribeHandler(name: string, handler: SubscribeHandler): void;
    sendRequest<T, R>(action: string, payload: T): Promise<R>;
    sendEvent<T>(action: string, payload: T): Promise<void>;
    createSubscription<T, O extends Record<string, unknown> = Record<string, unknown>>(name: string, handler: (event: T) => void, options?: O | undefined): Promise<CreateSubscriptionResult>;
}
