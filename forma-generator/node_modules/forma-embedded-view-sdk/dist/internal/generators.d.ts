import { IframeMessenger } from "./iframe-messenger.js";
type FieldCommmon = {
    name: string;
    label: string;
    hidden?: boolean;
};
type NumberField = FieldCommmon & {
    type: "number";
    min?: number;
    max?: number;
    step?: number;
};
type BooleanField = FieldCommmon & {
    type: "bool";
};
type EnumField = FieldCommmon & {
    type: "enum";
    options: string[];
};
type StringField = FieldCommmon & {
    type: "string";
};
type ColorField = FieldCommmon & {
    type: "color";
};
type PolygonField = FieldCommmon & {
    type: "polygon";
};
type PolylineField = FieldCommmon & {
    type: "polyline";
};
export type GeneratorSchemaV1Field = NumberField | BooleanField | EnumField | ColorField | StringField | PolygonField | PolylineField;
export type GeneratorSchemaV1Value = number | boolean | string | string | string | {
    points: [number, number][];
} | {
    points: [number, number][];
};
type Namespace = string;
type Owner = string;
type OwnerId = string;
type AuthContext = string;
type Id = string;
export type GeneratorUrn = `urn:${Namespace}:${Owner}:${OwnerId}:${AuthContext}:${Id}`;
export type ExtensionEndpointRunner = {
    type: "extensionEndpoint";
    extension: {
        extensionId: string;
        endpointId: string;
    };
    additionalData: unknown;
};
export type ExtensionScriptRunner = {
    type: "extensionScript";
    extensionId: string;
    bundleId: string;
    additionalData: unknown;
};
export type GeneratorSchemaV1 = {
    version: 1;
    fields: GeneratorSchemaV1Field[];
    defaultValues?: Record<string, GeneratorSchemaV1Value>;
};
export type Generator = {
    id: GeneratorUrn;
    name: string;
    runners: ({
        type: never;
    } | ExtensionEndpointRunner | ExtensionScriptRunner)[];
    schema: {
        version: never;
    } | GeneratorSchemaV1;
};
export type PutGeneratorRequest = {
    /**
     * Authcontext to use with the request.
     *
     * As of now, only the currently open project is supported as
     * authcontext when using the SDK.
     *
     * @defaultValue The currently open project.
     */
    authcontext?: string | undefined;
    data: Generator;
};
export type ListGeneratorsRequest = {
    /**
     * Authcontext to use with the request.
     *
     * As of now, only the currently open project is supported as
     * authcontext when using the SDK.
     *
     * @defaultValue The currently open project.
     */
    authcontext?: string | undefined;
};
export declare class GeneratorsApi {
    #private;
    constructor(iframeMessenger: IframeMessenger);
    put({ authcontext, data, }: PutGeneratorRequest): Promise<Generator>;
    list(request?: ListGeneratorsRequest | undefined): Promise<Generator[]>;
}
export {};
