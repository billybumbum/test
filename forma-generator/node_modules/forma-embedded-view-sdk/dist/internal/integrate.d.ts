import { IframeMessenger } from "./iframe-messenger.js";
/** Column-major 4x4 matrix. Translation values use metres as unit. */
type Transform = [
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number,
    number
];
export type IntegrateCreateElementChild = {
    /**
     * Either an ID to another element in the request or a full URN to an external element.
     * External elements must be in the integrate element system and for the same AuthContext.
     */
    id: string;
    transform?: Transform;
};
type GlbGeometry = {
    type: "File";
    format: "glb";
    s3Id: string;
    nodeId?: string;
    doubleSided?: boolean;
};
type MeshGeometry = {
    type: "Inline";
    format: "Mesh";
    doubleSided?: boolean;
    verts: number[];
    faces: number[];
};
type GeoJsonInlineGeometry = {
    type: "Inline";
    format: "GeoJSON";
    geoJson: {
        type: "FeatureCollection";
        features: unknown[];
    };
    nodeId?: string;
};
type GeoJsonFileGeometry = {
    type: "File";
    format: "GeoJSON";
    s3Id: string;
    nodeId: string;
};
export type IntegrateCreateElementProperties = {
    category?: string;
    name?: string;
    internalRepresentationReference?: string;
    geoReference?: {
        srid: number;
        refPoint: [number, number];
    };
    elementProvider?: string;
    geometry?: GlbGeometry | MeshGeometry | GeoJsonInlineGeometry | GeoJsonFileGeometry;
    [key: string]: unknown;
};
export type IntegrateCreateElement = {
    id: string;
    properties?: IntegrateCreateElementProperties;
    children?: IntegrateCreateElementChild[];
};
export type IntegrateCreateElementHierarchy = {
    rootElement: string;
    elements: Record<string, IntegrateCreateElement>;
};
export type IntegrateCreateElementHierarchyRequest = {
    /**
     * Authcontext to use with the request.
     *
     * As of now, only the currently open project is supported as
     * authcontext when using the SDK.
     *
     * @defaultValue The currently open project.
     */
    authcontext?: string | undefined;
    data: IntegrateCreateElementHierarchy;
};
export type IntegrateCreateElementHierarchyResponse = {
    id: string;
    urn: string;
    revision: string;
};
export type IntegrateUploadFileRequest = {
    /**
     * Authcontext to use with the request.
     *
     * As of now, only the currently open project is supported as
     * authcontext when using the SDK.
     *
     * @defaultValue The currently open project.
     */
    authcontext?: string | undefined;
    data: string | ArrayBuffer;
};
export type IntegrateUploadFileResponse = {
    fileId: string;
};
export declare class IntegrateApi {
    #private;
    constructor(iframeMessenger: IframeMessenger);
    createElementHierarchy(request: IntegrateCreateElementHierarchyRequest): Promise<IntegrateCreateElementHierarchyResponse>;
    uploadFile(request: IntegrateUploadFileRequest): Promise<IntegrateUploadFileResponse>;
}
export {};
