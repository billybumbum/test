import { IframeMessenger } from "./iframe-messenger.js";
export type UnitOfMeasurement = "COUNT" | "SQUARE_METER" | undefined;
export type FunctionBreakdownMetric = {
    functionId: string;
    functionName: string;
    functionColor: string;
    value: number | "UNABLE_TO_CALCULATE";
};
export type MetricWithFunctionBreakdown = {
    id: string;
    name: string;
    unitOfMeasurement?: UnitOfMeasurement;
    functionBreakdown: FunctionBreakdownMetric[];
};
export type MetricWithValue = {
    id: string;
    name: string;
    unitOfMeasurement?: UnitOfMeasurement;
    value: number | "UNABLE_TO_CALCULATE";
};
export type CalculateAreaMetricsResponse = {
    customMetrics: MetricWithFunctionBreakdown[];
    builtInMetrics: {
        grossFloorArea: MetricWithFunctionBreakdown;
        buildingCoverage: MetricWithValue;
        siteArea: MetricWithValue;
    };
    unitStatistics: {
        count: MetricWithValue;
    };
};
export type CalculateAreaMetricsRequest = {
    paths?: string[];
};
export declare class AreaMetricsApi {
    #private;
    constructor(iframeMessenger: IframeMessenger);
    /**
     * Calculate area metrics for the given paths.
     * If no paths are given, the metrics will be calculated for all elements.
     *
     *
     * @param calculateAreaMetricsRequest selection of paths to calculate metrics for
     * @returns the area metrics for the given paths
     */
    calculate(calculateAreaMetricsRequest: CalculateAreaMetricsRequest): Promise<CalculateAreaMetricsResponse>;
}
