var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _CameraApi_iframeMessenger;
function loadImage(url) {
    return new Promise((resolve, reject) => {
        const img = new Image();
        img.onload = () => {
            resolve(img);
        };
        img.onerror = () => {
            reject(new Error("Failed to load image"));
        };
        img.src = url;
    });
}
async function canvasFromDataUrl(url, width, height) {
    const canvas = document.createElement("canvas");
    canvas.width = width;
    canvas.height = height;
    const ctx = canvas.getContext("2d");
    if (!ctx) {
        throw new Error("Failed to get 2d context from canvas");
    }
    const imageElement = await loadImage(url);
    ctx.drawImage(imageElement, 0, 0);
    return canvas;
}
export class CameraApi {
    constructor(iframeMessenger) {
        _CameraApi_iframeMessenger.set(this, void 0);
        __classPrivateFieldSet(this, _CameraApi_iframeMessenger, iframeMessenger, "f");
    }
    async move({ position, target, zoom, transitionTimeMs, }) {
        await __classPrivateFieldGet(this, _CameraApi_iframeMessenger, "f").sendRequest("scene/camera/move", {
            position,
            target,
            zoom,
            transitionTimeMs,
        });
    }
    async switchPerspective() {
        await __classPrivateFieldGet(this, _CameraApi_iframeMessenger, "f").sendRequest("scene/camera/switch-perspective", {});
    }
    async capture({ width, height }) {
        return await canvasFromDataUrl(await __classPrivateFieldGet(this, _CameraApi_iframeMessenger, "f").sendRequest("scene/camera/capture", {
            width,
            height,
        }), width, height);
    }
    async getCurrent() {
        const currentCamera = await __classPrivateFieldGet(this, _CameraApi_iframeMessenger, "f").sendRequest("scene/camera/get-current", {});
        return {
            target: currentCamera.target,
            position: currentCamera.position,
            type: currentCamera.type,
        };
    }
}
_CameraApi_iframeMessenger = new WeakMap();
