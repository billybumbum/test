var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RenderApi_iframeMessenger;
export class RenderApi {
    constructor(iframeMessenger) {
        _RenderApi_iframeMessenger.set(this, void 0);
        __classPrivateFieldSet(this, _RenderApi_iframeMessenger, iframeMessenger, "f");
    }
    async addMesh({ geometryData, transform, }) {
        return await __classPrivateFieldGet(this, _RenderApi_iframeMessenger, "f").sendRequest("scene/render/add-mesh", {
            geometryData,
            transform,
        });
    }
    async updateMesh({ id, geometryData, transform, }) {
        await __classPrivateFieldGet(this, _RenderApi_iframeMessenger, "f").sendRequest("scene/render/update-mesh", {
            id,
            geometryData,
            transform,
        });
    }
    async remove(req) {
        await __classPrivateFieldGet(this, _RenderApi_iframeMessenger, "f").sendRequest("scene/render/remove", {
            id: req.id,
        });
    }
    async cleanup() {
        await __classPrivateFieldGet(this, _RenderApi_iframeMessenger, "f").sendRequest("scene/render/cleanup", {});
    }
}
_RenderApi_iframeMessenger = new WeakMap();
