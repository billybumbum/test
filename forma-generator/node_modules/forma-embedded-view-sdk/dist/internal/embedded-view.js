var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var _EmbeddedViewSdk_iframeMessenger, _EmbeddedViewSdk_customRequestHandlers, _EmbeddedViewSdk_customEventHandlers, _EmbeddedViewSdk_customSubscribeHandlers, _EmbeddedViewSdk_iframeResizer;
import { AnalysisApi } from "./analysis.js";
import { AreaMetricsApi } from "./areaMetrics.js";
import { ExtensionsApi } from "./extensions.js";
import { GeneratorsApi } from "./generators.js";
import { GeometryApi } from "./geometry.js";
import { IframeMessenger, } from "./iframe-messenger.js";
import { IntegrateApi } from "./integrate.js";
import { LibraryApi } from "./library.js";
import { ProjectApi } from "./project.js";
import { ProposalApi } from "./proposal.js";
import { CameraApi } from "./scene/camera.js";
import { RenderApi } from "./scene/render.js";
import { SunApi } from "./scene/sun.js";
import { TerrainApi } from "./scene/terrain.js";
import { SelectionApi } from "./selection.js";
const defaultAllowedOrigins = [
    // EU Prod
    "https://app.autodeskforma.com",
    /^https:\/\/local\.autodeskforma\.com:/,
    // US Prod
    "https://app.autodeskforma.eu",
    /^https:\/\/local\.autodeskforma\.eu:/,
    // EU Chaos
    "https://app.spacemakerai.eu",
    /^https:\/\/local\.spacemakerai\.eu:/,
];
export class EmbeddedViewSdk {
    constructor(config) {
        this.config = config;
        this.source = window.parent;
        _EmbeddedViewSdk_iframeMessenger.set(this, void 0);
        _EmbeddedViewSdk_customRequestHandlers.set(this, new Map());
        _EmbeddedViewSdk_customEventHandlers.set(this, new Map());
        _EmbeddedViewSdk_customSubscribeHandlers.set(this, new Map());
        _EmbeddedViewSdk_iframeResizer.set(this, new ResizeObserver((entries) => {
            const bodyEntry = entries.find((entry) => entry.target.tagName === "BODY");
            if (bodyEntry) {
                __classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f")
                    .sendRequest("resizeIframeHeight", {
                    height: bodyEntry.contentRect.height,
                })
                    .catch((err) => {
                    console.log("failed to resize iframe", err);
                });
            }
        }));
        this.origin = config?.origin ?? EmbeddedViewSdk.getHostOrigin();
        const allowedOrigins = config?.allowedOrigins ?? defaultAllowedOrigins;
        if (!allowedOrigins.some((allowedOrigin) => typeof allowedOrigin === "string"
            ? allowedOrigin === this.origin
            : allowedOrigin.test(this.origin))) {
            throw new Error(`Unsupported origin: ${this.origin}`);
        }
        __classPrivateFieldSet(this, _EmbeddedViewSdk_iframeMessenger, new IframeMessenger({
            sourceOrigin: this.origin,
            source: this.source,
            requestResolver: (action) => __classPrivateFieldGet(this, _EmbeddedViewSdk_customRequestHandlers, "f").get(action),
            eventResolver: (action) => __classPrivateFieldGet(this, _EmbeddedViewSdk_customEventHandlers, "f").get(action),
            subscribeResolver: (name) => __classPrivateFieldGet(this, _EmbeddedViewSdk_customSubscribeHandlers, "f").get(name),
            debug: config?.debug,
        }), "f");
        __classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f").connect();
        window.addEventListener("beforeunload", () => {
            __classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f").disconnect();
            __classPrivateFieldGet(this, _EmbeddedViewSdk_iframeResizer, "f").unobserve(document.body);
        });
        this.analysis = new AnalysisApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.extensions = new ExtensionsApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.generators = new GeneratorsApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.geometry = new GeometryApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.integrateElements = new IntegrateApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.library = new LibraryApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.project = new ProjectApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.proposal = new ProposalApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.camera = new CameraApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.sun = new SunApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.terrain = new TerrainApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.render = new RenderApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.selection = new SelectionApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        this.areaMetrics = new AreaMetricsApi(__classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f"));
        __classPrivateFieldGet(this, _EmbeddedViewSdk_iframeResizer, "f").observe(document.body);
    }
    async ping() {
        return await __classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f").sendRequest("ping", null);
    }
    getIframeMessenger() {
        return __classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f");
    }
    getProjectId() {
        const projectId = new URLSearchParams(window.location.search).get("projectId");
        if (!projectId) {
            throw new Error("Missing query parameter: projectId");
        }
        return projectId;
    }
    getExtensionId() {
        const extensionId = new URLSearchParams(window.location.search).get("extensionId");
        if (!extensionId) {
            throw new Error("Missing query parameter: extensionId");
        }
        return extensionId;
    }
    static getHostOrigin() {
        const origin = new URLSearchParams(window.location.search).get("origin");
        if (!origin) {
            throw new Error("Missing query parameter: origin");
        }
        return origin;
    }
    setRequestHandler(name, handler) {
        __classPrivateFieldGet(this, _EmbeddedViewSdk_customRequestHandlers, "f").set(name, handler);
    }
    setEventHandler(name, handler) {
        __classPrivateFieldGet(this, _EmbeddedViewSdk_customEventHandlers, "f").set(name, handler);
    }
    setSubscribeHandler(name, handler) {
        __classPrivateFieldGet(this, _EmbeddedViewSdk_customSubscribeHandlers, "f").set(name, handler);
    }
    sendRequest(action, payload) {
        return __classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f").sendRequest(action, payload);
    }
    sendEvent(action, payload) {
        return __classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f").sendEvent(action, payload);
    }
    createSubscription(name, handler, options) {
        return __classPrivateFieldGet(this, _EmbeddedViewSdk_iframeMessenger, "f").createSubscription(name, handler, options);
    }
}
_EmbeddedViewSdk_iframeMessenger = new WeakMap(), _EmbeddedViewSdk_customRequestHandlers = new WeakMap(), _EmbeddedViewSdk_customEventHandlers = new WeakMap(), _EmbeddedViewSdk_customSubscribeHandlers = new WeakMap(), _EmbeddedViewSdk_iframeResizer = new WeakMap();
